// This file was generated by counterfeiter
package fake

import (
	"io"
	"os"
	"path/filepath"
	"sync"

	"github.com/phogolabs/gom/migration"
)

type MigrationFileSystem struct {
	WalkStub        func(fn filepath.WalkFunc) error
	walkMutex       sync.RWMutex
	walkArgsForCall []struct {
		fn filepath.WalkFunc
	}
	walkReturns struct {
		result1 error
	}
	OpenStub        func(path string) (io.ReadCloser, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		path string
	}
	openReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	WriteFileStub        func(filename string, data []byte, perm os.FileMode) error
	writeFileMutex       sync.RWMutex
	writeFileArgsForCall []struct {
		filename string
		data     []byte
		perm     os.FileMode
	}
	writeFileReturns struct {
		result1 error
	}
	JoinStub        func(elem ...string) string
	joinMutex       sync.RWMutex
	joinArgsForCall []struct {
		elem []string
	}
	joinReturns struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *MigrationFileSystem) Walk(fn filepath.WalkFunc) error {
	fake.walkMutex.Lock()
	fake.walkArgsForCall = append(fake.walkArgsForCall, struct {
		fn filepath.WalkFunc
	}{fn})
	fake.recordInvocation("Walk", []interface{}{fn})
	fake.walkMutex.Unlock()
	if fake.WalkStub != nil {
		return fake.WalkStub(fn)
	}
	return fake.walkReturns.result1
}

func (fake *MigrationFileSystem) WalkCallCount() int {
	fake.walkMutex.RLock()
	defer fake.walkMutex.RUnlock()
	return len(fake.walkArgsForCall)
}

func (fake *MigrationFileSystem) WalkArgsForCall(i int) filepath.WalkFunc {
	fake.walkMutex.RLock()
	defer fake.walkMutex.RUnlock()
	return fake.walkArgsForCall[i].fn
}

func (fake *MigrationFileSystem) WalkReturns(result1 error) {
	fake.WalkStub = nil
	fake.walkReturns = struct {
		result1 error
	}{result1}
}

func (fake *MigrationFileSystem) Open(path string) (io.ReadCloser, error) {
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("Open", []interface{}{path})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(path)
	}
	return fake.openReturns.result1, fake.openReturns.result2
}

func (fake *MigrationFileSystem) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *MigrationFileSystem) OpenArgsForCall(i int) string {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].path
}

func (fake *MigrationFileSystem) OpenReturns(result1 io.ReadCloser, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *MigrationFileSystem) WriteFile(filename string, data []byte, perm os.FileMode) error {
	var dataCopy []byte
	if data != nil {
		dataCopy = make([]byte, len(data))
		copy(dataCopy, data)
	}
	fake.writeFileMutex.Lock()
	fake.writeFileArgsForCall = append(fake.writeFileArgsForCall, struct {
		filename string
		data     []byte
		perm     os.FileMode
	}{filename, dataCopy, perm})
	fake.recordInvocation("WriteFile", []interface{}{filename, dataCopy, perm})
	fake.writeFileMutex.Unlock()
	if fake.WriteFileStub != nil {
		return fake.WriteFileStub(filename, data, perm)
	}
	return fake.writeFileReturns.result1
}

func (fake *MigrationFileSystem) WriteFileCallCount() int {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	return len(fake.writeFileArgsForCall)
}

func (fake *MigrationFileSystem) WriteFileArgsForCall(i int) (string, []byte, os.FileMode) {
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	return fake.writeFileArgsForCall[i].filename, fake.writeFileArgsForCall[i].data, fake.writeFileArgsForCall[i].perm
}

func (fake *MigrationFileSystem) WriteFileReturns(result1 error) {
	fake.WriteFileStub = nil
	fake.writeFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *MigrationFileSystem) Join(elem ...string) string {
	fake.joinMutex.Lock()
	fake.joinArgsForCall = append(fake.joinArgsForCall, struct {
		elem []string
	}{elem})
	fake.recordInvocation("Join", []interface{}{elem})
	fake.joinMutex.Unlock()
	if fake.JoinStub != nil {
		return fake.JoinStub(elem...)
	}
	return fake.joinReturns.result1
}

func (fake *MigrationFileSystem) JoinCallCount() int {
	fake.joinMutex.RLock()
	defer fake.joinMutex.RUnlock()
	return len(fake.joinArgsForCall)
}

func (fake *MigrationFileSystem) JoinArgsForCall(i int) []string {
	fake.joinMutex.RLock()
	defer fake.joinMutex.RUnlock()
	return fake.joinArgsForCall[i].elem
}

func (fake *MigrationFileSystem) JoinReturns(result1 string) {
	fake.JoinStub = nil
	fake.joinReturns = struct {
		result1 string
	}{result1}
}

func (fake *MigrationFileSystem) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.walkMutex.RLock()
	defer fake.walkMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.writeFileMutex.RLock()
	defer fake.writeFileMutex.RUnlock()
	fake.joinMutex.RLock()
	defer fake.joinMutex.RUnlock()
	return fake.invocations
}

func (fake *MigrationFileSystem) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migration.FileSystem = new(MigrationFileSystem)
