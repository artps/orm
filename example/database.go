// Code generated by go-bindata.
// sources:
// database/migration/00060524000000_setup.sql
// database/migration/20180406190015_users.sql
// database/migration/20180409135434_test.sql
// database/migration/20180409135523_test.sql
// database/script/20180406191137.sql
// DO NOT EDIT!

package example

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _databaseMigration00060524000000_setupSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\xc3\x40\x10\x85\xef\xf3\x2b\xde\x51\xa1\x01\x5b\x54\x4a\x7a\x5a\xeb\x16\x82\x49\x1b\x92\x15\xda\x93\xac\xc9\x90\x2e\xd8\xdd\xb0\x99\xe0\xdf\x97\x45\x68\x0f\x3a\xa7\xe1\xf1\x3d\xf8\x5e\x96\x41\xcd\x12\xb2\x81\x3d\x47\x2b\xdc\xc3\x0a\x76\xd1\x41\x8d\x11\x78\xc6\x72\x9d\x3f\x3e\xe5\xcb\x15\xb6\xba\x35\x58\x3d\x2c\xd7\x94\x65\xa8\xbf\xd8\x4e\x8c\x3e\xc0\x07\x41\x77\xb6\x7e\x60\xc8\x99\xe1\xed\x85\x61\x45\xa2\xfb\x9c\x85\x27\x4a\x70\xca\x72\xcc\x23\xd1\xb6\xd1\xca\x68\x18\xf5\x52\x6a\x14\x3b\xec\x0f\x06\xfa\x58\xb4\xa6\xc5\xc5\x0d\xd1\x8a\x0b\x7e\xc2\x1d\xc1\xf5\xb8\x9e\xd1\x47\xf3\xfb\x25\x7c\xff\x5e\x96\xa8\x9b\xa2\x52\xcd\x09\x6f\xfa\xb4\x20\xf4\x3c\x75\xd1\x8d\xa9\xfc\x0f\xbc\x20\x74\x91\xd3\xb2\x0f\x2b\x80\x29\x2a\xdd\x1a\x55\xd5\x57\x80\xee\x37\x37\xcb\x3e\x7c\x7b\xa2\xd7\xe6\x50\xdf\x2c\xff\x18\x6e\x7e\x02\x00\x00\xff\xff\x8f\xe2\x55\x2d\x35\x01\x00\x00")

func databaseMigration00060524000000_setupSqlBytes() ([]byte, error) {
	return bindataRead(
		_databaseMigration00060524000000_setupSql,
		"database/migration/00060524000000_setup.sql",
	)
}

func databaseMigration00060524000000_setupSql() (*asset, error) {
	bytes, err := databaseMigration00060524000000_setupSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "database/migration/00060524000000_setup.sql", size: 309, mode: os.FileMode(384), modTime: time.Unix(1523033112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _databaseMigration20180406190015_usersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\x4a\xc3\x40\x10\xc6\xf1\xfb\x3c\xc5\x77\x54\x70\x21\x11\x14\x4d\x4f\x6b\xdd\x42\x30\xa6\x21\x19\xa1\x3d\xc9\x6a\xc6\x36\x50\x37\x65\x77\x16\x5f\x5f\xaa\x1e\xea\x75\xfe\xc3\xf7\x33\x06\x36\xeb\x6c\x76\x12\x24\x7a\x95\x11\x5e\xb1\x8a\x13\xec\x31\x02\xb7\x28\xef\xab\xa2\xa8\xca\x1b\x2c\xdd\xc0\xb8\x2e\xca\x3b\x32\x06\xdd\x41\x7c\x12\x8c\x33\xc2\xac\x78\xdf\xfb\xb0\x13\xe8\x5e\x10\xfc\xa7\xc0\xab\xc6\xe9\x2d\xab\x24\x3a\x3d\x9f\x6e\x15\xf2\x91\x96\xbd\xb3\xec\xc0\xf6\xa1\x71\xc8\x49\x62\xc2\x05\x01\xd3\x88\xba\x65\x74\x7d\xfd\x6c\xfb\x2d\x9e\xdc\x16\xed\x9a\xd1\xbe\x34\xcd\x15\x01\x1f\x53\x4c\xfa\xfa\x33\xcc\x6e\xc3\xff\xda\xc1\x9f\x27\xba\x5c\x9c\x81\xe3\xfc\x15\xe8\xb1\x5f\x77\x7f\x60\xbd\x82\xdb\xd4\x03\x0f\xbf\xf4\x82\xe8\x3b\x00\x00\xff\xff\x29\x6a\x91\x93\xfc\x00\x00\x00")

func databaseMigration20180406190015_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_databaseMigration20180406190015_usersSql,
		"database/migration/20180406190015_users.sql",
	)
}

func databaseMigration20180406190015_usersSql() (*asset, error) {
	bytes, err := databaseMigration20180406190015_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "database/migration/20180406190015_users.sql", size: 252, mode: os.FileMode(384), modTime: time.Unix(1523035034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _databaseMigration20180409135434_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\xaa\xc2\x40\x10\x45\xd1\x79\xaf\xe2\x6d\xa0\xe0\xe7\x27\x82\xf6\x2c\x88\x43\x41\xd0\x0d\x94\xf6\x23\x11\xb4\x2a\x74\xaa\x71\xfb\x92\x99\xc3\x7b\x39\x22\x18\x5b\xb8\x4c\x34\x56\x0d\x16\x68\xe0\xec\x86\x71\xa9\xc0\x01\x5d\x9f\x77\x43\xee\x07\x1c\x4f\xd7\x1b\xfe\xff\xba\x7d\x12\xc1\xe5\x45\x5d\x89\xe2\x30\x0f\x3c\x66\xb5\x89\x88\x99\x30\x7d\x13\x1a\x51\x9f\xf7\x16\x5c\xd3\x86\xb7\x97\xd1\x96\x9f\x28\xfe\xb1\x94\xbe\x01\x00\x00\xff\xff\xd1\x83\xe3\xbe\x7c\x00\x00\x00")

func databaseMigration20180409135434_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_databaseMigration20180409135434_testSql,
		"database/migration/20180409135434_test.sql",
	)
}

func databaseMigration20180409135434_testSql() (*asset, error) {
	bytes, err := databaseMigration20180409135434_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "database/migration/20180409135434_test.sql", size: 124, mode: os.FileMode(384), modTime: time.Unix(1523274874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _databaseMigration20180409135523_testSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\xaa\xc2\x40\x10\x45\xd1\x79\xaf\xe2\x6d\xa0\xe0\x27\x21\xf0\xed\x59\x10\x87\x82\xa0\x1b\x28\xed\x47\x22\x68\x55\xe8\x54\xe3\xf6\x25\x33\x87\xf7\x72\x44\x30\xb5\x70\x99\x69\xac\x1a\x2c\xd0\xc0\xd9\x0d\xd3\x5a\x81\x03\xba\x21\x8f\x63\xee\x07\x1c\x4f\xd7\x1b\xfa\xbf\xee\x3f\x89\xe0\xf2\xa2\x6e\x44\x71\x98\x07\x1e\x8b\xda\x4c\xc4\x42\x98\xbe\x09\x8d\xa8\xcf\x7b\x0b\x6e\x69\xc7\xfb\xcb\x68\xeb\x4f\x14\xff\x58\x4a\xdf\x00\x00\x00\xff\xff\x25\xee\x17\x41\x7c\x00\x00\x00")

func databaseMigration20180409135523_testSqlBytes() ([]byte, error) {
	return bindataRead(
		_databaseMigration20180409135523_testSql,
		"database/migration/20180409135523_test.sql",
	)
}

func databaseMigration20180409135523_testSql() (*asset, error) {
	bytes, err := databaseMigration20180409135523_testSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "database/migration/20180409135523_test.sql", size: 124, mode: os.FileMode(384), modTime: time.Unix(1523274923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _databaseScript20180406191137Sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\x70\x2c\x2d\xc9\xd7\x4d\x4f\xcd\x4b\x2d\x4a\x2c\x49\x4d\x51\x48\x2c\x51\x70\x2b\xca\x54\x70\x2c\x28\x52\x50\x30\x53\x30\xb4\xb4\x32\x34\xb4\x32\x36\x57\x70\x76\x0d\x0e\x51\x30\x32\x30\xb4\xe0\xd2\xd5\x55\xc8\x4b\xcc\x4d\xb5\x52\x28\xce\xc8\x2f\xd7\x2d\x2d\x4e\x2d\x2a\xe6\x0a\x76\xf5\x71\x75\x0e\x51\xd0\x52\x70\x0b\xf2\xf7\x55\x00\x8b\x59\x73\x71\x01\x02\x00\x00\xff\xff\x44\xc1\xfc\xff\x5d\x00\x00\x00")

func databaseScript20180406191137SqlBytes() ([]byte, error) {
	return bindataRead(
		_databaseScript20180406191137Sql,
		"database/script/20180406191137.sql",
	)
}

func databaseScript20180406191137Sql() (*asset, error) {
	bytes, err := databaseScript20180406191137SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "database/script/20180406191137.sql", size: 93, mode: os.FileMode(384), modTime: time.Unix(1523035003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"database/migration/00060524000000_setup.sql": databaseMigration00060524000000_setupSql,
	"database/migration/20180406190015_users.sql": databaseMigration20180406190015_usersSql,
	"database/migration/20180409135434_test.sql": databaseMigration20180409135434_testSql,
	"database/migration/20180409135523_test.sql": databaseMigration20180409135523_testSql,
	"database/script/20180406191137.sql": databaseScript20180406191137Sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"database": &bintree{nil, map[string]*bintree{
		"migration": &bintree{nil, map[string]*bintree{
			"00060524000000_setup.sql": &bintree{databaseMigration00060524000000_setupSql, map[string]*bintree{}},
			"20180406190015_users.sql": &bintree{databaseMigration20180406190015_usersSql, map[string]*bintree{}},
			"20180409135434_test.sql": &bintree{databaseMigration20180409135434_testSql, map[string]*bintree{}},
			"20180409135523_test.sql": &bintree{databaseMigration20180409135523_testSql, map[string]*bintree{}},
		}},
		"script": &bintree{nil, map[string]*bintree{
			"20180406191137.sql": &bintree{databaseScript20180406191137Sql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

